<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- enable autowire -->
	<context:annotation-config />

	<context:component-scan base-package="com.order" />
	<!-- <context:exclude-filter type="regex" expression="com.taikoomotors.ep.dao.mybatis.*"/> 
		</context:component-scan> -->

	<!-- 引入jdbc配置文件 -->
	<!-- <context:property-placeholder location="classpath:conf/jdbc.properties" /> -->
	<!-- load properties -->
	<bean id="configFiles" class="java.util.ArrayList">  
    	<constructor-arg>   
        <list>  
             	<value>classpath:conf/jdbc.properties</value>
             	<value>classpath:conf/path.properties</value>
        </list>  
    	</constructor-arg>  
	</bean> 
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" ref="configFiles"/>
	</bean>	
	
	<bean id="dataSourceQuery" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
      <property name="driverClass">
        <value>${jdbc_query_driverClassName}</value>
      </property>
      <property name="jdbcUrl">
        <value>${jdbc_query_url}</value>
      </property>
      <property name="user">
       <value>${jdbc_query_username}</value>
      </property>
      <property name="password">
       <value>${jdbc_query_password}</value>
      </property>
      <property name="initialPoolSize"><value>10</value></property><!-- 初始化时创建的连接数，应在minPoolSize与maxPoolSize之间取值。默认为3 --> 
      <property name="minPoolSize"><value>30</value></property><!-- 连接池中保留的最小连接数。默认为15 -->
      <property name="maxPoolSize"><value>100</value></property><!-- 连接池中保留的最大连接数。默认为15； -->
      <property name="acquireIncrement"><value>10</value></property><!-- 当连接池中的连接用完时，C3P0一次性创建新连接的数目 -->
      <property name="maxIdleTime"><value>1800</value></property><!-- 最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃。默认为0 -->
      <property name="maxStatements"><value>0</value></property><!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatement数量 但由于预缓存的Statement属 于单个Connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素，如果maxStatements与 maxStatementsPerConnection均为0，则缓存被关闭。默认为0 -->
      <property name="checkoutTimeout"><value>30000</value></property><!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 SQLException,如设为0则无限期等待。单位毫秒 -->
      <property name="idleConnectionTestPeriod"><value>1800</value></property><!-- 隔多少秒检查所有连接池中的空闲连接，默认为0表示不检查 -->
      <property name="acquireRetryAttempts"><value>100</value></property><!-- 定义在从数据库获取新连接失败后重复尝试获取的次数，默认为30 -->
      <property name="acquireRetryDelay"><value>20</value></property><!-- 两次连接中间隔时间，单位毫秒，默认为1000 -->
      <property name="maxStatementsPerConnection"><value>100</value></property><!-- 连接池内单个连接所拥有的最大缓存Statement数。默认为0 -->
      <property name="autoCommitOnClose"><value>true</value></property><!-- 连接关闭时默认将所有未提交的操作回滚。默认为false -->
      <property name="breakAfterAcquireFailure"><value>true</value></property><!-- 获取连接失败将会引起所有等待获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调   用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认为 false -->
    </bean>

	<!-- 謮寫分離-> 只讀查詢 -->
	<!-- <bean id="dataSourceQuery" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName">
			<value>${jdbc_query_driverClassName}</value>
		</property>
		<property name="url">
			<value>${jdbc_query_url}</value>
		</property>
		<property name="username">
			<value>${jdbc_query_username}</value>
		</property>
		<property name="password">
			<value>${jdbc_query_password}</value>
		</property>
		最大连接数据库连接数，设置为0时，表示没有限制
		<property name="maxActive">
			<value>20</value>
		</property>
		最大等待连接中的数量，设置为0时，表示没有限制
		<property name="maxIdle">
			<value>20</value>
		</property>
		最大等待秒数，单位为毫秒， 超过时间会报出错误信息
		<property name="maxWait">
			<value>60000</value>
		</property>
		連接池最小空間
		<property name="minIdle">
			<value>3</value>
		</property>
		是否自我中断，默认是 false
		<property name="removeAbandoned">
			<value>true</value>
		</property>
		几秒后数据连接会自动断开，在removeAbandoned为true，提供该值
		<property name="removeAbandonedTimeout">
			<value>180</value>
		</property>
		初始化連接大小
		<property name="initialSize">
			<value>1</value>
		</property>
		連接屬性
		<property name="connectionProperties">
			<value>clientEncoding=UTF-8</value>
		</property>
	</bean> -->

	<!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" 
		init-method="init" destroy-method="close"> <property name="driverClassName"> 
		<value>${jdbc_query_driverClassName}</value> </property> <property name="url"> 
		<value>${jdbc_query_url}</value> </property> <property name="username"> <value>${jdbc_query_username}</value> 
		</property> <property name="password"> <value>${jdbc_query_password}</value> 
		</property> 連接池最大使用連接數 <property name="maxActive"> <value>20</value> </property> 
		初始化連接大小 <property name="initialSize"> <value>1</value> </property> 獲取連接最大等待時間 
		<property name="maxWait"> <value>60000</value> </property> 連接池最大空間 <property 
		name="maxIdle"> <value>20</value> </property> 連接池最小空間 <property name="minIdle"> 
		<value>3</value> </property> 自動清除無用連接 <property name="removeAbandoned"> <value>true</value> 
		</property> 清除無用連接的等待時間 <property name="removeAbandonedTimeout"> <value>180</value> 
		</property> 連接屬性 <property name="connectionProperties"> <value>clientEncoding=UTF-8</value> 
		</property> </bean> -->

	<!-- mybatis (start) -->
	<!-- define the SqlSessionFactory -->
	<bean id="sqlSessionFactoryQuery" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceQuery" />
		<property name="typeAliasesPackage" value="com.order.mode" />
		<!-- <property name="configLocation" value="classpath:com/taikoomotors/ep/dao/mybatis/conf/mybatis-config.xml" 
			/> -->
		<property name="mapperLocations" value="classpath*:com/order/dao/mybatis/maps/*.xml" />
		<!-- 分頁另一種方式直接配置在Mybatis xml  -->	
		<!-- <property name="configLocation" value="classpath:com/order/dao/mybatis/conf/mybatis-config.xml"/> -->
		<!-- 分頁 -->
		<property name="plugins">
	        <array>
	            <ref bean="paginationInterceptor"/>
	        </array>
	    </property>
	</bean>
	<!-- 分頁 -->
	<bean id="paginationInterceptor" class="com.github.miemiedev.mybatis.paginator.OffsetLimitInterceptor">
		<property name="dialectClass" value="com.github.miemiedev.mybatis.paginator.dialect.MySQLDialect" />
	</bean>
	<!-- mybatis (end) -->

	<bean id="transactionManagerQuery"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceQuery" />
	</bean>

	<bean id="baseTransactionProxyQuery"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		abstract="true">
		<property name="transactionManager" ref="transactionManagerQuery" />
		<property name="transactionAttributes">
			<props>
				<prop key="insert">PROPAGATION_REQUIRED</prop>
				<prop key="create*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="end*">PROPAGATION_REQUIRED</prop>
				<prop key="cancel*">PROPAGATION_REQUIRED</prop>
				<prop key="get*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	
	<bean id="dataSourceTrs" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
      <property name="driverClass">
        <value>${jdbc_trs_driverClassName}</value>
      </property>
      <property name="jdbcUrl">
        <value>${jdbc_trs_url}</value>
      </property>
      <property name="user">
       <value>${jdbc_trs_username}</value>
      </property>
      <property name="password">
       <value>${jdbc_trs_password}</value>
      </property>
      <property name="initialPoolSize"><value>10</value></property><!-- 初始化时创建的连接数，应在minPoolSize与maxPoolSize之间取值。默认为3 --> 
      <property name="minPoolSize"><value>30</value></property><!-- 连接池中保留的最小连接数。默认为15 -->
      <property name="maxPoolSize"><value>100</value></property><!-- 连接池中保留的最大连接数。默认为15； -->
      <property name="acquireIncrement"><value>10</value></property><!-- 当连接池中的连接用完时，C3P0一次性创建新连接的数目 -->
      <property name="maxIdleTime"><value>1800</value></property><!-- 最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃。默认为0 -->
      <property name="maxStatements"><value>0</value></property><!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatement数量 但由于预缓存的Statement属 于单个Connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素，如果maxStatements与 maxStatementsPerConnection均为0，则缓存被关闭。默认为0 -->
      <property name="checkoutTimeout"><value>30000</value></property><!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 SQLException,如设为0则无限期等待。单位毫秒 -->
      <property name="idleConnectionTestPeriod"><value>1800</value></property><!-- 隔多少秒检查所有连接池中的空闲连接，默认为0表示不检查 -->
      <property name="acquireRetryAttempts"><value>100</value></property><!-- 定义在从数据库获取新连接失败后重复尝试获取的次数，默认为30 -->
      <property name="acquireRetryDelay"><value>20</value></property><!-- 两次连接中间隔时间，单位毫秒，默认为1000 -->
      <property name="maxStatementsPerConnection"><value>100</value></property><!-- 连接池内单个连接所拥有的最大缓存Statement数。默认为0 -->
      <property name="autoCommitOnClose"><value>true</value></property><!-- 连接关闭时默认将所有未提交的操作回滚。默认为false -->
      <property name="breakAfterAcquireFailure"><value>true</value></property><!-- 获取连接失败将会引起所有等待获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调   用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认为 false -->
    </bean> 

	<!-- <bean id="dataSourceTrs" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName">
			<value>${jdbc_trs_driverClassName}</value>
		</property>
		<property name="url">
			<value>${jdbc_trs_url}</value>
		</property>
		<property name="username">
			<value>${jdbc_trs_username}</value>
		</property>
		<property name="password">
			<value>${jdbc_trs_password}</value>
		</property>
		最大连接数据库连接数，设置为0时，表示没有限制
		<property name="maxActive">
			<value>20</value>
		</property>
		最大等待连接中的数量，设置为0时，表示没有限制
		<property name="maxIdle">
			<value>20</value>
		</property>
		最大等待秒数，单位为毫秒， 超过时间会报出错误信息
		<property name="maxWait">
			<value>60000</value>
		</property>
		連接池最小空間
		<property name="minIdle">
			<value>3</value>
		</property>
		是否自我中断，默认是 false
		<property name="removeAbandoned">
			<value>true</value>
		</property>
		几秒后数据连接会自动断开，在removeAbandoned为true，提供该值
		<property name="removeAbandonedTimeout">
			<value>180</value>
		</property>
		初始化連接大小
		<property name="initialSize">
			<value>1</value>
		</property>
		連接屬性
		<property name="connectionProperties">
			<value>clientEncoding=UTF-8</value>
		</property>
	</bean> -->


	<!-- 謮寫分離-> 只寫入 新增、修改、刪除 -->
	<!-- <bean id="dataSourceTrs" class="com.alibaba.druid.pool.DruidDataSource" 
		init-method="init" destroy-method="close"> <property name="driverClassName"> 
		<value>${jdbc_trs_driverClassName}</value> </property> <property name="url"> 
		<value>${jdbc_trs_url}</value> </property> <property name="username"> <value>${jdbc_trs_username}</value> 
		</property> <property name="password"> <value>${jdbc_trs_password}</value> 
		</property> 連接池最大使用連接數 <property name="maxActive"> <value>20</value> </property> 
		初始化連接大小 <property name="initialSize"> <value>1</value> </property> 獲取連接最大等待時間 
		<property name="maxWait"> <value>60000</value> </property> 連接池最大空間 <property 
		name="maxIdle"> <value>20</value> </property> 連接池最小空間 <property name="minIdle"> 
		<value>3</value> </property> 自動清除無用連接 <property name="removeAbandoned"> <value>true</value> 
		</property> 清除無用連接的等待時間 <property name="removeAbandonedTimeout"> <value>180</value> 
		</property> 連接屬性 <property name="connectionProperties"> <value>clientEncoding=UTF-8</value> 
		</property> </bean> -->

	<bean id="sqlSessionFactoryTrs" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceTrs" />
		<property name="typeAliasesPackage" value="com.order.mode" />
		<!-- <property name="configLocation" value="classpath:com/taikoomotors/ep/dao/mybatis/conf/mybatis-config.xml" 
			/> -->
		<property name="mapperLocations" value="classpath*:com/order/dao/mybatis/maps/*.xml" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceTrs" />
	</bean>

	<bean id="baseTransactionProxyTrs"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		abstract="true">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="insert">PROPAGATION_REQUIRED</prop>
				<prop key="create*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="end*">PROPAGATION_REQUIRED</prop>
				<prop key="cancel*">PROPAGATION_REQUIRED</prop>
				<prop key="get*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>


	<!-- <bean id="dataSourceQuery" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="com.p6spy.engine.spy.P6SpyDriver" 
		/> <property name="driverClassName" value="com.mysql.jdbc.Driver" /> <property 
		name="url" value="jdbc:mysql://127.0.0.1:3306/cooltwo" /> <property name="username" 
		value="root" /> <property name="password" value="kingg777" /> </bean> -->

	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" 
		/> <property name="url" value="jdbc:oracle:thin:@192.168.1.178:1521:tmgrmst" 
		/> <property name="username" value="VMS_AP" /> <property name="password" 
		value="test" /> </bean> -->

	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>